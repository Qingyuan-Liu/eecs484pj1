INSERT INTO USERS(USER_ID, FIRST_NAME, LAST_NAME, YEAR_OF_BIRTH, MONTH_OF_BIRTH, DAY_OF_BIRTH, GENDER)
SELECT DISTINCT USER_ID, FIRST_NAME, LAST_NAME, YEAR_OF_BIRTH, MONTH_OF_BIRTH, DAY_OF_BIRTH, GENDER
FROM jsoren.PUBLIC_USER_INFORMATION;

--Friends

INSERT INTO FRIENDS (USER1_ID, USER2_ID)
SELECT DISTINCT tmp.USER1_ID, tmp.USER2_ID
FROM jsoren.PUBLIC_ARE_FRIENDS tmp
WHERE tmp.USER1_ID <> tmp.USER2_ID;

--CITIES

INSERT INTO CITIES (CITY_NAME, STATE_NAME, COUNTRY_NAME)
SELECT DISTINCT TMP.CITY, TMP.STATE, TMP.COUNTRY FROM(
SELECT DISTINCT P1.CURRENT_CITY AS CITY, P1.CURRENT_STATE AS STATE, P1.CURRENT_COUNTRY AS COUNTRY
FROM jsoren.PUBLIC_USER_INFORMATION P1
WHERE P1.CURRENT_CITY IS NOT NULL
UNION
SELECT DISTINCT P2.HOMETOWN_CITY, P2.HOMETOWN_STATE, P2.HOMETOWN_COUNTRY
FROM jsoren.PUBLIC_USER_INFORMATION P2
WHERE P2.HOMETOWN_CITY IS NOT NULL
UNION 
SELECT DISTINCT P3.EVENT_CITY, P3.EVENT_STATE, P3.EVENT_COUNTRY
FROM jsoren.PUBLIC_EVENT_INFORMATION P3
WHERE P3.EVENT_CITY IS NOT NULL) TMP;

INSERT INTO USER_CURRENT_CITIES (USER_ID, CURRENT_CITY_ID)
SELECT DISTINCT j1.USER_ID, current_city.CITY_ID
FROM CITIES current_city, jsoren.PUBLIC_USER_INFORMATION j1
WHERE current_city.CITY_NAME = j1.CURRENT_CITY AND
current_city.STATE_NAME = j1.CURRENT_STATE AND current_city.COUNTRY_NAME = j1.CURRENT_COUNTRY;

INSERT INTO USER_HOMETOWN_CITIES(USER_ID, HOMETOWN_CITY_ID)
SELECT DISTINCT j1.USER_ID, hometown_city.CITY_ID
FROM CITIES hometown_city, jsoren.PUBLIC_USER_INFORMATION j1
WHERE hometown_city.CITY_NAME=j1.HOMETOWN_CITY AND 
hometown_city.STATE_NAME=j1.HOMETOWN_STATE AND hometown_city.COUNTRY_NAME=j1.HOMETOWN_COUNTRY;

--PROGRAMS


INSERT INTO PROGRAMS(INSTITUTION, CONCENTRATION, DEGREE)
SELECT DISTINCT TMP.INSTITUTION_NAME, TMP.PROGRAM_CONCENTRATION, TMP.PROGRAM_DEGREE
FROM jsoren.PUBLIC_USER_INFORMATION TMP
WHERE TMP.INSTITUTION_NAME IS NOT NULL;

INSERT INTO EDUCATION(USER_ID, PROGRAM_ID, PROGRAM_YEAR)
SELECT DISTINCT j1.USER_ID, TMP.PROGRAM_ID, j1.PROGRAM_YEAR
FROM jsoren.PUBLIC_USER_INFORMATION j1, PROGRAMS TMP
WHERE j1.INSTITUTION_NAME = TMP.INSTITUTION AND j1.PROGRAM_CONCENTRATION = TMP.CONCENTRATION
AND j1.PROGRAM_DEGREE = TMP.DEGREE;



--EVENT
INSERT INTO USER_EVENTS (EVENT_ID, EVENT_CREATOR_ID, EVENT_NAME, EVENT_TAGLINE,
EVENT_DESCRIPTION, EVENT_HOST, EVENT_TYPE, EVENT_SUBTYPE, EVENT_ADDRESS, EVENT_CITY_ID,
EVENT_START_TIME, EVENT_END_TIME)
SELECT DISTINCT TMP.EVENT_ID, TMP.EVENT_CREATOR_ID, TMP.EVENT_NAME, TMP.EVENT_TAGLINE, TMP.EVENT_DESCRIPTION,
TMP.EVENT_HOST, TMP.EVENT_TYPE, TMP.EVENT_SUBTYPE, TMP.EVENT_ADDRESS, CUR.CITY_ID, TMP.EVENT_START_TIME, 
TMP.EVENT_END_TIME
FROM jsoren.PUBLIC_EVENT_INFORMATION TMP, CITIES CUR, USERS u1
WHERE TMP.EVENT_ID IS NOT NULL AND TMP.EVENT_CREATOR_ID IS NOT NULL 
AND TMP.EVENT_NAME IS NOT NULL AND TMP.EVENT_CITY = CUR.CITY_NAME AND
 TMP.EVENT_STATE = CUR.STATE_NAME AND TMP.EVENT_COUNTRY = CUR.COUNTRY_NAME
 AND u1.USER_ID = TMP.EVENT_CREATOR_ID;

--PHOTO(We create PHOTO first as we need check album cover photo is in PHOTOS)
ALTER TABLE PHOTOS
DROP CONSTRAINT ALBUM_CONSTRAINT;

INSERT INTO PHOTOS (PHOTO_ID, ALBUM_ID, PHOTO_CAPTION, PHOTO_CREATED_TIME, PHOTO_MODIFIED_TIME, PHOTO_LINK)
SELECT DISTINCT photo.PHOTO_ID, photo.ALBUM_ID, photo.PHOTO_CAPTION, photo.PHOTO_CREATED_TIME, photo.PHOTO_MODIFIED_TIME, photo.PHOTO_LINK
FROM jsoren.PUBLIC_PHOTO_INFORMATION photo;

--ALBUMS
INSERT INTO ALBUMS (ALBUM_ID, ALBUM_OWNER_ID, ALBUM_NAME, ALBUM_CREATED_TIME, ALBUM_MODIFIED_TIME, ALBUM_LINK, ALBUM_VISIBILITY, COVER_PHOTO_ID)
SELECT DISTINCT TMP.ALBUM_ID, TMP.OWNER_ID, TMP.ALBUM_NAME, TMP.ALBUM_CREATED_TIME, TMP.ALBUM_MODIFIED_TIME, TMP.ALBUM_LINK, TMP.ALBUM_VISIBILITY, TMP.COVER_PHOTO_ID
FROM jsoren.PUBLIC_PHOTO_INFORMATION TMP;


--TAGS
INSERT INTO TAGS(TAG_PHOTO_ID, TAG_SUBJECT_ID, TAG_CREATED_TIME, TAG_X, TAG_Y)
SELECT DISTINCT TMP.PHOTO_ID, TMP.TAG_SUBJECT_ID, TMP.TAG_CREATED_TIME, TMP.TAG_X_COORDINATE, TMP.TAG_Y_COORDINATE 
FROM jsoren.PUBLIC_TAG_INFORMATION TMP;

ALTER TABLE PHOTOS
ADD CONSTRAINT ALBUM_CONSTRAINT
FOREIGN KEY (ALBUM_ID) REFERENCES ALBUMS(ALBUM_ID);